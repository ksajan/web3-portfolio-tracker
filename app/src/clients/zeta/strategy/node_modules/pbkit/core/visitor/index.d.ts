import * as ast from "../ast/index";
import { Token } from "../parser/recursive-descent-parser";
export interface Visitor {
    visitProto: VisitFn<ast.Proto>;
    visitTopLevelStatement: VisitFn<ast.TopLevelStatement>;
    visitSyntax: VisitFn<ast.Syntax>;
    visitImport: VisitFn<ast.Import>;
    visitPackage: VisitFn<ast.Package>;
    visitOption: VisitFn<ast.Option>;
    visitOptionName: VisitFn<ast.OptionName>;
    visitOptionNameSegment: VisitFn<ast.OptionNameSegment>;
    visitTopLevelDef: VisitFn<ast.TopLevelDef>;
    visitMessage: VisitFn<ast.Message>;
    visitMessageBody: VisitFn<ast.MessageBody>;
    visitMessageBodyStatement: VisitFn<ast.MessageBodyStatement>;
    visitEnum: VisitFn<ast.Enum>;
    visitEnumBody: VisitFn<ast.EnumBody>;
    visitEnumBodyStatement: VisitFn<ast.EnumBodyStatement>;
    visitEnumField: VisitFn<ast.EnumField>;
    visitExtend: VisitFn<ast.Extend>;
    visitExtendBody: VisitFn<ast.ExtendBody>;
    visitExtendBodyStatement: VisitFn<ast.ExtendBodyStatement>;
    visitService: VisitFn<ast.Service>;
    visitServiceBody: VisitFn<ast.ServiceBody>;
    visitServiceBodyStatement: VisitFn<ast.ServiceBodyStatement>;
    visitRpc: VisitFn<ast.Rpc>;
    visitRpcBody: VisitFn<ast.RpcBody>;
    visitRpcBodyStatement: VisitFn<ast.RpcBodyStatement>;
    visitRpcType: VisitFn<ast.RpcType>;
    visitEmpty: VisitFn<ast.Empty>;
    visitField: VisitFn<ast.Field>;
    visitFieldOptions: VisitFn<ast.FieldOptions>;
    visitFieldOption: VisitFn<ast.FieldOption>;
    visitGroup: VisitFn<ast.Group>;
    visitOneof: VisitFn<ast.Oneof>;
    visitOneofBody: VisitFn<ast.OneofBody>;
    visitOneofBodyStatement: VisitFn<ast.OneofBodyStatement>;
    visitOneofField: VisitFn<ast.OneofField>;
    visitOneofGroup: VisitFn<ast.OneofGroup>;
    visitMalformedField: VisitFn<ast.MalformedField>;
    visitMapField: VisitFn<ast.MapField>;
    visitExtensions: VisitFn<ast.Extensions>;
    visitRanges: VisitFn<ast.Ranges>;
    visitRange: VisitFn<ast.Range>;
    visitMax: VisitFn<ast.Max>;
    visitReserved: VisitFn<ast.Reserved>;
    visitFieldNames: VisitFn<ast.FieldNames>;
    visitConstant: VisitFn<ast.Constant>;
    visitCommentGroup: VisitFn<ast.CommentGroup>;
    visitComment: VisitFn<ast.Comment>;
    visitSinglelineComment: VisitFn<ast.SinglelineComment>;
    visitMultilineComment: VisitFn<ast.MultilineComment>;
    visitKeyword: VisitFn<ast.Keyword>;
    visitType: VisitFn<ast.Type>;
    visitFullIdent: VisitFn<ast.FullIdent>;
    visitIntLit: VisitFn<ast.IntLit>;
    visitSignedIntLit: VisitFn<ast.SignedIntLit>;
    visitFloatLit: VisitFn<ast.FloatLit>;
    visitSignedFloatLit: VisitFn<ast.SignedFloatLit>;
    visitStrLit: VisitFn<ast.StrLit>;
    visitBoolLit: VisitFn<ast.BoolLit>;
    visitAggregate: VisitFn<ast.Aggregate>;
    visitIdent: VisitFn<ast.Ident>;
    visitDot: VisitFn<ast.Dot>;
    visitComma: VisitFn<ast.Comma>;
    visitSemi: VisitFn<ast.Semi>;
    visitToken: VisitFn<Token>;
}
export interface VisitFn<T> {
    (visitor: Visitor, node: T): void;
}
export declare const visitor: Visitor;
export declare function visitStatementBase<T extends ast.StatementBase>(visitor: Visitor, node: T, visit: () => void): void;
