"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDocComment = exports.isMultilineComment = exports.isSinglelineComment = exports.unwrapDocComment = exports.unwrapMultilineComment = exports.unwrapSinglelineComment = exports.unwrap = void 0;
function unwrap(text) {
    // "//"
    if (isSinglelineComment(text))
        return unwrapSinglelineComment(text);
    // "/**"
    if (isDocComment(text))
        return unwrapDocComment(text);
    // "/*"
    if (isMultilineComment(text))
        return unwrapMultilineComment(text);
    return text;
}
exports.unwrap = unwrap;
function unwrapSinglelineComment(text) {
    return text.replace(/^\/\/+\s?/, "").replace(/\r?\n$/, "");
}
exports.unwrapSinglelineComment = unwrapSinglelineComment;
function unwrapMultilineComment(text) {
    if (!text.startsWith("/*") || !(text.endsWith("*/")))
        return text;
    const body = text.slice(2, -2).replace(/^[ \t\r]*\n|\n[ \t\r]*$/g, "");
    const lines = body.split("\n");
    return removeCommonLeadingSpaces(lines).join("\n");
}
exports.unwrapMultilineComment = unwrapMultilineComment;
function unwrapDocComment(text) {
    const match = /\/\*\*[\s\S]*?\n([\s\S]+?)\n\s*\*\//.exec(text);
    if (!match)
        return text;
    const [, body] = match;
    const lines = body.split("\n").map((line) => line.replace(/\s*\*/, ""));
    return removeCommonLeadingSpaces(lines).join("\n");
}
exports.unwrapDocComment = unwrapDocComment;
function isSinglelineComment(text) {
    return text.startsWith("//");
}
exports.isSinglelineComment = isSinglelineComment;
function isMultilineComment(text) {
    return text.startsWith("/*");
}
exports.isMultilineComment = isMultilineComment;
function isDocComment(text) {
    return text.startsWith("/**");
}
exports.isDocComment = isDocComment;
function removeCommonLeadingSpaces(lines) {
    const commonLeadingSpaceCount = Math.min(...lines.map(getLeadingSpaceCount));
    return lines.map((line) => line.slice(commonLeadingSpaceCount));
}
function getLeadingSpaceCount(line) {
    let count = 0;
    for (const char of line) {
        if (char === " ")
            ++count;
        else
            break;
    }
    return count;
}
