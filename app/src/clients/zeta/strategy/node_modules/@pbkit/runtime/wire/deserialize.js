"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Long_1 = require("../Long");
const index_1 = require("./index");
const varint_1 = require("./varint");
function deserialize(uint8array) {
    let idx = 0;
    const offset = uint8array.byteOffset;
    const result = [];
    const dataview = new DataView(uint8array.buffer, offset);
    while (idx < uint8array.length) {
        const decodeResult = (0, varint_1.decode)(new DataView(uint8array.buffer, offset + idx));
        const key = decodeResult[1][0];
        idx += decodeResult[0];
        const type = (key & 0b111);
        const fieldNumber = key >>> 3;
        switch (type) {
            case index_1.WireType.Varint: {
                const [len, value] = (0, varint_1.decode)(new DataView(uint8array.buffer, offset + idx));
                result.push([fieldNumber, { type, value }]);
                idx += len;
                break;
            }
            case index_1.WireType.Fixed64:
                const lo = dataview.getUint32(idx, true);
                const hi = dataview.getUint32(idx += 4, true);
                idx += 4;
                result.push([fieldNumber, {
                        type,
                        value: new Long_1.default(lo, hi),
                    }]);
                break;
            case index_1.WireType.LengthDelimited: {
                const [len, value] = (0, varint_1.decode)(new DataView(uint8array.buffer, offset + idx));
                result.push([fieldNumber, {
                        type,
                        value: uint8array.subarray(idx += len, idx += value[0]),
                    }]);
                break;
            }
            case index_1.WireType.StartGroup:
            case index_1.WireType.EndGroup:
                result.push([fieldNumber, { type }]);
                break;
            case index_1.WireType.Fixed32:
                result.push([fieldNumber, {
                        type,
                        value: dataview.getUint32(idx, true),
                    }]);
                idx += 4;
                break;
        }
    }
    return result;
}
exports.default = deserialize;
