declare type TsValueToJsonValue<T> = (tsValue: T) => unknown;
interface TsValueToJsonValueFns {
    int32: TsValueToJsonValue<number>;
    int64: TsValueToJsonValue<string>;
    uint32: TsValueToJsonValue<number>;
    uint64: TsValueToJsonValue<string>;
    sint32: TsValueToJsonValue<number>;
    sint64: TsValueToJsonValue<string>;
    bool: TsValueToJsonValue<boolean>;
    double: TsValueToJsonValue<number>;
    float: TsValueToJsonValue<number>;
    fixed32: TsValueToJsonValue<number>;
    fixed64: TsValueToJsonValue<string>;
    sfixed32: TsValueToJsonValue<number>;
    sfixed64: TsValueToJsonValue<string>;
    string: TsValueToJsonValue<string>;
    bytes: TsValueToJsonValue<Uint8Array>;
    enum: TsValueToJsonValue<string>;
}
export declare const tsValueToJsonValueFns: TsValueToJsonValueFns;
export {};
